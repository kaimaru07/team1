<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/img/**" location="/resources/imgUpload/" />


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- Spring 에 @Controller, @Component, @Service, @Repository 등의 이름으로 등록된 
		클래스를 찾아서(스캔) 자동으로 Spring bean 객체로 등록해준다. -->
	<context:component-scan
		base-package="com.web.finalproj" />

	<!-- 데이터베이스 연결 객체를 빈(bean)에 등록한다. -->
	<beans:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName"
			value="oracle.jdbc.OracleDriver"></beans:property>
		<beans:property name="url"
			value="jdbc:oracle:thin:@localhost:1521:orcl"></beans:property>
		<beans:property name="username" value="finalproj"></beans:property>
		<beans:property name="password" value="finalproj"></beans:property>
	</beans:bean>

	<!-- 빈에 등록된 데이터베이스 연결 객체를 JdbcTemplate 에 등록(주입: DI - Dependency Injection) 
		한다. -->
	<beans:bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
	</beans:bean>

	<!-- mybatis 연동을 위한 bean 등록 -->
	<beans:bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
		<beans:property name="configLocation"
			value="classpath:/mybatis/mybatis-config.xml"></beans:property>
		<beans:property name="mapperLocations"
			value="classpath:/mybatis/mapper/*.xml"></beans:property>
	</beans:bean>

	<beans:bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0"
			ref="sqlSessionFactory"></beans:constructor-arg>
	</beans:bean>

	<beans:bean id="chatHandler"
		class="com.web.finalproj.chat.handler.ChatWebSocketHandler" />
	<websocket:handlers>
		<websocket:mapping handler="chatHandler"
			path="/chat" />
		<websocket:handshake-interceptors>
			<beans:bean
				class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor" />
		</websocket:handshake-interceptors>
		<websocket:sockjs />
	</websocket:handlers>

	<!-- 업로드 패스 설정 -->
	<beans:bean class="java.lang.String" id="uploadPath">
		<beans:constructor-arg
			value="C:\websys\1613156\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\WebFinalSpringProject\" />
	</beans:bean>

	<resources mapping="/imgUpload/**"
		location="/resources/imgUpload/" />

	<beans:bean
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		id="multipartResolver">
		<beans:property name="maxUploadSize" value="10485760" />
	</beans:bean>

</beans:beans>